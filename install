#!/bin/bash
set -e -o pipefail

# This script prepares a Linux box for Shepherd-Traefik.
#
# This script is intended to be run on Ubuntu Linux 24.04 or higher;
# both x86-64 and arm64 are supported.
#
# Other linux distros may or may not work. For other distros,
# Feel free not to run this script, but instead replicate
# the commands listed here.
#
# Run this script as root.

# Update the system to the latest version.
apt update && apt dist-upgrade

# Install docker (make sure Docker is version 24 or higher, to have access to docker build cachces):
apt install docker.io docker-buildx docker-compose
# Create a private docker network for administrative tools (Jenkins and Shepherd-Java).
# Traefik will route jenkins.admin.mydomain.me and admin.mydomain.me here.
if [[ -z "$(docker network ls --format '{{.Name}}' --filter name=admin.int)" ]]; then
  docker network create admin.int
fi

# We'll use a lot of networks with docker - one network per project. The default limit of docker networks is 29
# which means we can create and host 28 projects tops (minus 1 network allocated for admin stuff).
# To be able to create more networks, we'll update docker daemon config.
# We'll also enable docker-buildx local caches, by enabling the `"containerd-snapshotter": true` feature
cat <<EOT > /etc/docker/daemon.json
{
   "default-address-pools": [
        {
            "base":"172.17.0.0/12",
            "size":16
        },
        {
            "base":"192.168.0.0/16",
            "size":20
        },
        {
            "base":"10.99.0.0/16",
            "size":24
        }
    ],
  "features": {
    "containerd-snapshotter": true
  }
}
EOT

# Restart the docker daemon, in order for the settings to take effect:
systemctl restart docker.service
# Verify that the setting took effect: this should print
# driver-type: io.containerd.snapshotter.v1
docker info|grep driver-type


# We'll use docker-buildx build caches for faster project build.
# See https://mvysny.github.io/docker-build-cache/ for more details.
# We need separate build caches per project, otherwise we can't build projects in parallel since
# they would overwrite their caches. See https://github.com/mvysny/shepherd/issues/3 for more details.
#
# In order for the projects to take advantage of the cache, the project must contain this in their `Dockerfile`s:
#
# RUN --mount=type=cache,target=/root/.gradle --mount=type=cache,target=/root/.vaadin ./gradlew clean build -Pvaadin.productionMode --no-daemon --info --stacktrace
#
# Note the `--mount-type` arg.

mkdir -p /var/cache/shepherd/docker
chgrp docker /var/cache/shepherd/docker
chmod g+w /var/cache/shepherd/docker

# Create a folder where Jenkins will store everything: projects being built, its configuration,
# its plugins...
mkdir -p /var/opt/shepherd/jenkins_home
chown 1000 /var/opt/shepherd/jenkins_home  # Jenkins runs as user 1000

# If unchecked, docker build images will consume all disk space.
# We'll add the following cron weekly job to purge the images:
ln -s "$(pwd)/shepherd-clearcache" /etc/cron.weekly/


# Prepare shepherd-java configuration file
mkdir -p /etc/shepherd/java
cat <<EOT >/etc/shepherd/java/config.json
{
  "memoryQuotaMb": 14102,
  "concurrentJenkinsBuilders": 2,
  "maxProjectRuntimeResources": {
    "memoryMb": 512,
    "cpu": 1
  },
  "maxProjectBuildResources": {
    "memoryMb": 2500,
    "cpu": 2
  },
  "jenkins": {
    "url": "http://jenkins:8080",
    "username": "admin",
    "password": "admin"
  },
  "hostDNS": "mydomain.me",
  "shepherdHome": "$(pwd)",
  "containerSystem": "traefik-docker"
}
EOT

# Everything is prepared now.
echo
echo "Installation is now done. Further steps:"
echo
echo "1. Jenkins runs as user 'jenkins' and we need to add it to the 'docker' group in order to run docker commands."
echo "The 'docker' group GROUP_ID is:"
getent group docker
echo "Edit 'docker-compose.yaml', the 'group_add' clause, and update the number 125 to the correct group id of the 'docker'"
echo
echo "2. If this setup is a toy debug setup:"
echo "  - Add entries for mydomain.me to /etc/hosts: '127.0.0.1 jenkins.admin.mydomain.me admin.mydomain.me vaadin-boot-example-gradle.mydomain.me'"
echo "If this is a production setup:"
echo "  - Edit 'docker-compose.yaml' and replace `mydomain.me` with the DNS domain you own, and you allocated for this project."
echo "  - Remove the '--api.insecure=true' Traefik switch and prevent Traefik from listening on port 8080"
echo
echo "3. Edit /etc/shepherd/java/config.json and make sure the values are correct."
echo "  - See https://github.com/mvysny/shepherd-java-client for documentation on the config file contents"
echo
echo "4. To start Shepherd-Traefik, run"
echo "$ docker-compose up -d"
echo "Docker will be configured to restart the Shepherd-Traefik automatically after reboot, so no further steps are necessary"
echo
echo "5. Visit http://jenkins.admin.mydomain.me to configure Jenkins.  Enter the generated admin password (logged to stdout of your docker-compose), then:"
echo "- Select plugins to install"
echo '  - Disable "Folders", "Ant", all "Pipeline" plugins, "SSH Build Agents", "Matrix Auth Strategy", "PAM Auth", "LDAP", "Email Extension" and "Dark Theme".'
echo '  - Create the "admin" user, with a good strong password.'
echo "  - Go to *Manage Jenkins / System* and set '# of executors': 2"
echo
echo "6. Visit http://admin.mydomain.me to visit the Shepherd-Java Web administrative interface."
echo '- Login with "mavi@vaadin.com"/"admin" and change the password'
